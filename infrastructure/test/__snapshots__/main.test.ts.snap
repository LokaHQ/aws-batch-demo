// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot matches previous state 1`] = `
Object {
  "Outputs": Object {
    "JobDefinitonArn": Object {
      "Value": Object {
        "Ref": "jobDefinitionE329FAEC",
      },
    },
    "JobQueueArn": Object {
      "Value": Object {
        "Ref": "jobQueue87DBE095",
      },
    },
    "ServiceLoadBalancerDNSEC5B149E": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "ServiceLBE9A1ADBC",
          "DNSName",
        ],
      },
    },
    "ServiceServiceURL250C0FB6": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "ServiceLBE9A1ADBC",
                "DNSName",
              ],
            },
          ],
        ],
      },
    },
    "WebAppUrl": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "ServiceLBE9A1ADBC",
                "DNSName",
              ],
            },
            "/",
          ],
        ],
      },
    },
  },
  "Resources": Object {
    "EcsDefaultClusterMnL3mNNYNvpcFC68BC3A": Object {
      "Type": "AWS::ECS::Cluster",
    },
    "Service9571FDD8": Object {
      "DependsOn": Array [
        "ServiceLBPublicListenerECSGroup0CC8688C",
        "ServiceLBPublicListener46709EAA",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "EcsDefaultClusterMnL3mNNYNvpcFC68BC3A",
        },
        "DeploymentConfiguration": Object {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DesiredCount": 2,
        "EnableECSManagedTags": false,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": Array [
          Object {
            "ContainerName": "web",
            "ContainerPort": 7070,
            "TargetGroupArn": Object {
              "Ref": "ServiceLBPublicListenerECSGroup0CC8688C",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "ServiceSecurityGroupEEA09B68",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "vpcingressSubnet1Subnet4E016228",
              },
              Object {
                "Ref": "vpcingressSubnet2SubnetEC320D03",
              },
            ],
          },
        },
        "TaskDefinition": Object {
          "Ref": "ServiceTaskDef1922A00F",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "ServiceLBE9A1ADBC": Object {
      "DependsOn": Array [
        "vpcingressSubnet1DefaultRoute69B9019B",
        "vpcingressSubnet1RouteTableAssociationBA5D4A44",
        "vpcingressSubnet2DefaultRoute9BA4F3D4",
        "vpcingressSubnet2RouteTableAssociationBD7DE3FC",
      ],
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "ServiceLBSecurityGroupF7435A5C",
              "GroupId",
            ],
          },
        ],
        "Subnets": Array [
          Object {
            "Ref": "vpcingressSubnet1Subnet4E016228",
          },
          Object {
            "Ref": "vpcingressSubnet2SubnetEC320D03",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "ServiceLBPublicListener46709EAA": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "ServiceLBPublicListenerECSGroup0CC8688C",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "ServiceLBE9A1ADBC",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "ServiceLBPublicListenerECSGroup0CC8688C": Object {
      "Properties": Object {
        "HealthCheckPath": "/healthcheck",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": Array [
          Object {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
        ],
        "TargetType": "ip",
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "ServiceLBSecurityGroupF7435A5C": Object {
      "Properties": Object {
        "GroupDescription": "Automatically created Security Group for ELB MyTestStackServiceLB3B267320",
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ServiceLBSecurityGrouptoMyTestStackServiceSecurityGroup98109A0E7070C118F88E": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ServiceSecurityGroupEEA09B68",
            "GroupId",
          ],
        },
        "FromPort": 7070,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ServiceLBSecurityGroupF7435A5C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "ToPort": 7070,
      },
      "Type": "AWS::EC2::SecurityGroupEgress",
    },
    "ServiceSecurityGroupEEA09B68": Object {
      "Properties": Object {
        "GroupDescription": "MyTestStack/Service/Service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ServiceSecurityGroupfromMyTestStackServiceLBSecurityGroup4E5826B3707031DBF6AF": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "FromPort": 7070,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "ServiceSecurityGroupEEA09B68",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ServiceLBSecurityGroupF7435A5C",
            "GroupId",
          ],
        },
        "ToPort": 7070,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ServiceTaskDef1922A00F": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Environment": Array [
              Object {
                "Name": "HTTP_PORT",
                "Value": "7070",
              },
              Object {
                "Name": "JOB_DEFINITION",
                "Value": Object {
                  "Ref": "jobDefinitionE329FAEC",
                },
              },
              Object {
                "Name": "JOB_QUEUE",
                "Value": Object {
                  "Ref": "jobQueue87DBE095",
                },
              },
              Object {
                "Name": "SECRET_KEY",
                "Value": "0736e5b9-a884-4252-911c-6f9d73513a21",
              },
            ],
            "Essential": true,
            "Image": Object {
              "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:bb228ab87fc051e77a45816900ed7da9b4d3b9d1de991106d67fc5657967a639",
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "ServiceTaskDefwebLogGroup2A898F61",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "Service",
              },
            },
            "Name": "web",
            "PortMappings": Array [
              Object {
                "ContainerPort": 7070,
                "Protocol": "tcp",
              },
            ],
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "ServiceTaskDefExecutionRole919F7BE3",
            "Arn",
          ],
        },
        "Family": "MyTestStackServiceTaskDef45089EBD",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "ServiceTaskDefTaskRole0CFE2F57",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "ServiceTaskDefExecutionRole919F7BE3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ServiceTaskDefExecutionRoleDefaultPolicy3073559D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":repository/",
                    Object {
                      "Fn::Sub": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ServiceTaskDefwebLogGroup2A898F61",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ServiceTaskDefExecutionRoleDefaultPolicy3073559D",
        "Roles": Array [
          Object {
            "Ref": "ServiceTaskDefExecutionRole919F7BE3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ServiceTaskDefTaskRole0CFE2F57": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ServiceTaskDefTaskRoleDefaultPolicy9CCB4F8E": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "batch:ListJobs",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "batch:SubmitJob",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Ref": "jobQueue87DBE095",
                },
                Object {
                  "Ref": "jobDefinitionE329FAEC",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ServiceTaskDefTaskRoleDefaultPolicy9CCB4F8E",
        "Roles": Array [
          Object {
            "Ref": "ServiceTaskDefTaskRole0CFE2F57",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ServiceTaskDefwebLogGroup2A898F61": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "computeEnvironmentEcsInstanceRole4547AA6D": Object {
      "DependsOn": Array [
        "vpcIGWE57CBDCA",
        "vpcingressSubnet1DefaultRoute69B9019B",
        "vpcingressSubnet1RouteTable1A2E6413",
        "vpcingressSubnet1RouteTableAssociationBA5D4A44",
        "vpcingressSubnet1Subnet4E016228",
        "vpcingressSubnet2DefaultRoute9BA4F3D4",
        "vpcingressSubnet2RouteTable4047C3AC",
        "vpcingressSubnet2RouteTableAssociationBD7DE3FC",
        "vpcingressSubnet2SubnetEC320D03",
        "vpcrdsSubnet1RouteTableFFE08759",
        "vpcrdsSubnet1RouteTableAssociation3E946461",
        "vpcrdsSubnet1Subnet81509054",
        "vpcrdsSubnet2RouteTable780314E2",
        "vpcrdsSubnet2RouteTableAssociationA8E58271",
        "vpcrdsSubnet2SubnetCEFF1A53",
        "vpcA2121C38",
        "vpcVPCGW7984C166",
      ],
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "computeEnvironmentFCCDFAF8": Object {
      "DependsOn": Array [
        "vpcIGWE57CBDCA",
        "vpcingressSubnet1DefaultRoute69B9019B",
        "vpcingressSubnet1RouteTable1A2E6413",
        "vpcingressSubnet1RouteTableAssociationBA5D4A44",
        "vpcingressSubnet1Subnet4E016228",
        "vpcingressSubnet2DefaultRoute9BA4F3D4",
        "vpcingressSubnet2RouteTable4047C3AC",
        "vpcingressSubnet2RouteTableAssociationBD7DE3FC",
        "vpcingressSubnet2SubnetEC320D03",
        "vpcrdsSubnet1RouteTableFFE08759",
        "vpcrdsSubnet1RouteTableAssociation3E946461",
        "vpcrdsSubnet1Subnet81509054",
        "vpcrdsSubnet2RouteTable780314E2",
        "vpcrdsSubnet2RouteTableAssociationA8E58271",
        "vpcrdsSubnet2SubnetCEFF1A53",
        "vpcA2121C38",
        "vpcVPCGW7984C166",
      ],
      "Properties": Object {
        "ComputeResources": Object {
          "AllocationStrategy": "BEST_FIT",
          "InstanceRole": Object {
            "Fn::GetAtt": Array [
              "computeEnvironmentInstanceProfile904A7DA2",
              "Arn",
            ],
          },
          "InstanceTypes": Array [
            "optimal",
          ],
          "MaxvCpus": 256,
          "MinvCpus": 0,
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "computeEnvironmentResourceSecurityGroup662A37A1",
                "GroupId",
              ],
            },
          ],
          "Subnets": Array [
            Object {
              "Ref": "vpcingressSubnet1Subnet4E016228",
            },
            Object {
              "Ref": "vpcingressSubnet2SubnetEC320D03",
            },
          ],
          "Type": "EC2",
        },
        "ServiceRole": Object {
          "Fn::GetAtt": Array [
            "computeEnvironmentResourceServiceInstanceRoleF536CA04",
            "Arn",
          ],
        },
        "State": "ENABLED",
        "Type": "MANAGED",
      },
      "Type": "AWS::Batch::ComputeEnvironment",
    },
    "computeEnvironmentInstanceProfile904A7DA2": Object {
      "DependsOn": Array [
        "vpcIGWE57CBDCA",
        "vpcingressSubnet1DefaultRoute69B9019B",
        "vpcingressSubnet1RouteTable1A2E6413",
        "vpcingressSubnet1RouteTableAssociationBA5D4A44",
        "vpcingressSubnet1Subnet4E016228",
        "vpcingressSubnet2DefaultRoute9BA4F3D4",
        "vpcingressSubnet2RouteTable4047C3AC",
        "vpcingressSubnet2RouteTableAssociationBD7DE3FC",
        "vpcingressSubnet2SubnetEC320D03",
        "vpcrdsSubnet1RouteTableFFE08759",
        "vpcrdsSubnet1RouteTableAssociation3E946461",
        "vpcrdsSubnet1Subnet81509054",
        "vpcrdsSubnet2RouteTable780314E2",
        "vpcrdsSubnet2RouteTableAssociationA8E58271",
        "vpcrdsSubnet2SubnetCEFF1A53",
        "vpcA2121C38",
        "vpcVPCGW7984C166",
      ],
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "computeEnvironmentEcsInstanceRole4547AA6D",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "computeEnvironmentResourceSecurityGroup662A37A1": Object {
      "DependsOn": Array [
        "vpcIGWE57CBDCA",
        "vpcingressSubnet1DefaultRoute69B9019B",
        "vpcingressSubnet1RouteTable1A2E6413",
        "vpcingressSubnet1RouteTableAssociationBA5D4A44",
        "vpcingressSubnet1Subnet4E016228",
        "vpcingressSubnet2DefaultRoute9BA4F3D4",
        "vpcingressSubnet2RouteTable4047C3AC",
        "vpcingressSubnet2RouteTableAssociationBD7DE3FC",
        "vpcingressSubnet2SubnetEC320D03",
        "vpcrdsSubnet1RouteTableFFE08759",
        "vpcrdsSubnet1RouteTableAssociation3E946461",
        "vpcrdsSubnet1Subnet81509054",
        "vpcrdsSubnet2RouteTable780314E2",
        "vpcrdsSubnet2RouteTableAssociationA8E58271",
        "vpcrdsSubnet2SubnetCEFF1A53",
        "vpcA2121C38",
        "vpcVPCGW7984C166",
      ],
      "Properties": Object {
        "GroupDescription": "MyTestStack/computeEnvironment/Resource-Security-Group",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "computeEnvironmentResourceServiceInstanceRoleF536CA04": Object {
      "DependsOn": Array [
        "vpcIGWE57CBDCA",
        "vpcingressSubnet1DefaultRoute69B9019B",
        "vpcingressSubnet1RouteTable1A2E6413",
        "vpcingressSubnet1RouteTableAssociationBA5D4A44",
        "vpcingressSubnet1Subnet4E016228",
        "vpcingressSubnet2DefaultRoute9BA4F3D4",
        "vpcingressSubnet2RouteTable4047C3AC",
        "vpcingressSubnet2RouteTableAssociationBD7DE3FC",
        "vpcingressSubnet2SubnetEC320D03",
        "vpcrdsSubnet1RouteTableFFE08759",
        "vpcrdsSubnet1RouteTableAssociation3E946461",
        "vpcrdsSubnet1Subnet81509054",
        "vpcrdsSubnet2RouteTable780314E2",
        "vpcrdsSubnet2RouteTableAssociationA8E58271",
        "vpcrdsSubnet2SubnetCEFF1A53",
        "vpcA2121C38",
        "vpcVPCGW7984C166",
      ],
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "batch.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSBatchServiceRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "jobDefinitionE329FAEC": Object {
      "Properties": Object {
        "ContainerProperties": Object {
          "Command": Array [
            "/app/bin/demoapp-compute",
            "--name",
            "Ref::inputdata",
          ],
          "Environment": Array [
            Object {
              "Name": "AWS_REGION",
              "Value": Object {
                "Ref": "AWS::Region",
              },
            },
            Object {
              "Name": "AWS_ACCOUNT",
              "Value": Object {
                "Ref": "AWS::AccountId",
              },
            },
          ],
          "Image": Object {
            "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:bb228ab87fc051e77a45816900ed7da9b4d3b9d1de991106d67fc5657967a639",
          },
          "Privileged": false,
          "ReadonlyRootFilesystem": false,
          "ResourceRequirements": Array [
            Object {
              "Type": "VCPU",
              "Value": "1",
            },
            Object {
              "Type": "MEMORY",
              "Value": "512",
            },
          ],
        },
        "JobDefinitionName": "jobDefinitionName",
        "PlatformCapabilities": Array [
          "EC2",
        ],
        "RetryStrategy": Object {
          "Attempts": 1,
        },
        "Timeout": Object {},
        "Type": "container",
      },
      "Type": "AWS::Batch::JobDefinition",
    },
    "jobQueue87DBE095": Object {
      "Properties": Object {
        "ComputeEnvironmentOrder": Array [
          Object {
            "ComputeEnvironment": Object {
              "Ref": "computeEnvironmentFCCDFAF8",
            },
            "Order": 100,
          },
        ],
        "JobQueueName": "jobQueueName",
        "Priority": 1,
        "State": "ENABLED",
      },
      "Type": "AWS::Batch::JobQueue",
    },
    "vpcA2121C38": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "MyTestStack/vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "vpcIGWE57CBDCA": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "MyTestStack/vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "vpcVPCGW7984C166": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "vpcIGWE57CBDCA",
        },
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "vpcingressSubnet1DefaultRoute69B9019B": Object {
      "DependsOn": Array [
        "vpcVPCGW7984C166",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "vpcIGWE57CBDCA",
        },
        "RouteTableId": Object {
          "Ref": "vpcingressSubnet1RouteTable1A2E6413",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "vpcingressSubnet1RouteTable1A2E6413": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "MyTestStack/vpc/ingressSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "vpcingressSubnet1RouteTableAssociationBA5D4A44": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "vpcingressSubnet1RouteTable1A2E6413",
        },
        "SubnetId": Object {
          "Ref": "vpcingressSubnet1Subnet4E016228",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "vpcingressSubnet1Subnet4E016228": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "ingress",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "MyTestStack/vpc/ingressSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "vpcingressSubnet2DefaultRoute9BA4F3D4": Object {
      "DependsOn": Array [
        "vpcVPCGW7984C166",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "vpcIGWE57CBDCA",
        },
        "RouteTableId": Object {
          "Ref": "vpcingressSubnet2RouteTable4047C3AC",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "vpcingressSubnet2RouteTable4047C3AC": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "MyTestStack/vpc/ingressSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "vpcingressSubnet2RouteTableAssociationBD7DE3FC": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "vpcingressSubnet2RouteTable4047C3AC",
        },
        "SubnetId": Object {
          "Ref": "vpcingressSubnet2SubnetEC320D03",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "vpcingressSubnet2SubnetEC320D03": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.1.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "ingress",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "MyTestStack/vpc/ingressSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "vpcrdsSubnet1RouteTableAssociation3E946461": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "vpcrdsSubnet1RouteTableFFE08759",
        },
        "SubnetId": Object {
          "Ref": "vpcrdsSubnet1Subnet81509054",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "vpcrdsSubnet1RouteTableFFE08759": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "MyTestStack/vpc/rdsSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "vpcrdsSubnet1Subnet81509054": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            0,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.2.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "rds",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
          Object {
            "Key": "Name",
            "Value": "MyTestStack/vpc/rdsSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "vpcrdsSubnet2RouteTable780314E2": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "MyTestStack/vpc/rdsSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "vpcrdsSubnet2RouteTableAssociationA8E58271": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "vpcrdsSubnet2RouteTable780314E2",
        },
        "SubnetId": Object {
          "Ref": "vpcrdsSubnet2SubnetCEFF1A53",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "vpcrdsSubnet2SubnetCEFF1A53": Object {
      "Properties": Object {
        "AvailabilityZone": Object {
          "Fn::Select": Array [
            1,
            Object {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.3.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "rds",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
          Object {
            "Key": "Name",
            "Value": "MyTestStack/vpc/rdsSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcA2121C38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
  },
}
`;
